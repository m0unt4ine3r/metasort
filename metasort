#!/usr/bin/env python3

#Metadata based sorting script (WIP) by Anthony Roebuck III

#Additions:
#Still needs to check if the 4 tags are already there, if not then skip; needs part to add original auth; add file input capability; add option to sort into genre dirs; add option to specify dir to sort to; maybe add file recursion; add select ability to select amount at a time; have sorter check thru artist string for '&' as a cutoff; add title parser for metachange to reduce tedium 
#maybe add driver for audacity or some other conversion tool and a pipeline for it into the script
#graceful keyboard int - from changer, sort files that were iterated over

#Notes to self:
#Specifying songs doesnt work properly
#Consider changing paths to Artists/... and Genres/... (or something else) for clutter reduction or move soundboard and unprocced folder elswhere
#Songs from phone dont have id3 tags?

######################################################################################################
#Imports and globals

import re, argparse, songclass, secondary
from sorter import metasort
from changer import metachange
from os import chdir, environ, getcwd
from glob import glob
from subprocess import call, DEVNULL, check_output
from codecs import decode
from os.path import exists, isdir, isfile, join, split

#Default paths for files to sort (source) and location to create directories (dest):
source=join(environ['HOME'], "Music", "Unprocced")
dest=join(environ['HOME'], "Music")

######################################################################################################
#Script behavior:

#args: -s sort only; -c change only; -l input from list; -f only use specific files; -n return number of files without at least 4 tags; --source=source execute with different source directory; --dest=dest execute with different destination dir

if __name__ == "__main__":
	import sys
	parser = argparse.ArgumentParser(description="Metadata based music sorter.", epilog="Defaults can be manually changend in the script's code.")

	#Main arg:
	parser.add_argument("songs", metavar="song.mp3", nargs='*', help="can specify individual files to be used, else all files in source directory are used")

	#Xor args: 
	group = parser.add_mutually_exclusive_group()
	group.add_argument('-a', '--changeandsort', action="store_true", default=False, help="runs metadat changer, sorts files, and exits")
	group.add_argument('-c', '--changeonly', action="store_true", default=False, help="runs metadata changer and exits")
	group.add_argument('-n', '--numunsorted', action="store_true", default=False, help="counts files and exits")

	#Or args:
#	parser.add_argument('-l', metavar="list.txt", help="input from list")			#no list io yet

	#Long args:
	parser.add_argument('--source', metavar="dir", nargs=1, help="use different source directory; default={}".format(source))
	parser.add_argument('--dest', metavar="dir", nargs=1, help="use different destination directory; default={}".format(dest))

	#Verbosity:
	noise = parser.add_mutually_exclusive_group()
	noise.add_argument('-v', '--verbose', action="count", default=1, help="increase output verbosity")
	noise.add_argument('-q', '--quiet', action="store_true", help="decrease output verbosity")

	#Collect args:
	args = parser.parse_args()

	#Handling verbosity:
	if args.verbose >= 2:
		verbosity = 3
	elif args.verbose == 1:
		verbosity = 2
	elif args.quiet:
		verbosity = 0
	else:
		verbosity = 1

	#Handling long args: *maybe make into function
	if args.source != None:
		for elem in args.source:
			source = elem
			if not isdir(source):
				sys.exit("Directory does not exist: {}".format(source))
	if args.dest != None:
		for elem in args.dest:
			dest = elem
			if not isdir(dest):
				sys.exit("Directory does not exist: {}".format(dest))

	#Setting environ/variables
	chdir(source)
	songs = glob("*.mp3")
	numsongs = len(songs)

	#Checking/validation:
	for elem in args.songs:											#when using specific
		if not isfile(elem):
			sys.exit("File does not exist: {}".format(elem))

#Calling functions:

	##For full processing:					*needs way to validate specified songs given as args
	if args.changeandsort:										#validation for changensort
		if args.songs != []:#for full processing of specific files *consider making into a function *fix?
			snum = 1			
			for elem in args.songs:
				altsrc = split(join(environ['PWD'], elem))[0]
				song = split(join(environ['PWD'], elem))[1]
				metachange([song], [snum, len(args.songs)], specific=True, target=altsrc, verb=verbosity)
				snum += 1

		else:
			processed = metachange(songs, numsongs, specific=False, target=source, verb=verbosity)
			metasort(processed[0], processed[1], specific=False, srcdir=source, destdir=dest, verb=verbosity)

	#Only change:
	elif args.changeonly:
		metachange(processed = metachange(songs, numsongs, specific=False, target=source, verb=verbosity))

	#Only return amount:
	elif args.numunsorted:
		print("Number of songs in default source ({}): {}.".format(split(source)[1], numsongs))

	#Sort:
	else:						#*needs way to validate specified songs given as args too?
		metasort(songs, numsongs, specific=False, srcdir=source, destdir=dest, verb=verbosity)
